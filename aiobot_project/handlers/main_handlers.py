from aiogram import Router, types
from aiogram.filters import Command
from aiobot_project.config import OPENROUTER_API_KEY
from aiobot_project.keyboards.menu import main_menu
import aiohttp
import asyncio

router = Router()

@router.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –ò–ò —á–µ—Ä–µ–∑ OpenRouter.\n–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å üß†",
        reply_markup=main_menu
    )

@router.message()
async def message_handler(message: types.Message):
    text = message.text.strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ" ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    if text.lower() == "–æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ":
        await message.answer_photo(
            photo="https://placekitten.com/500/500",
            caption="–í–æ—Ç –∫–æ—Ç–∏–∫ üê±"
        )
        return

    await message.answer("ü§ñ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")

    max_retries = 3
    for attempt in range(max_retries):
        try:
            async with aiohttp.ClientSession() as session:
                headers = {
                    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                    "Content-Type": "application/json"
                }
                data = {
                    "model": "baidu/ernie-4.5-300b-a47b",
                    "messages": [
                        {"role": "system", "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."},
                        {"role": "user", "content": text}
                    ]
                }
                async with session.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data) as resp:
                    result = await resp.json()

                    if "error" in result:
                        error_msg = result['error'].get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API')
                        if attempt == max_retries - 1:
                            await message.answer(f"–û—à–∏–±–∫–∞ API: {error_msg}")
                        else:
                            await asyncio.sleep(2)  # –ø–æ–¥–æ–∂–¥–∞—Ç—å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                        continue

                    answer = result["choices"][0]["message"]["content"]
                    await message.answer(answer)
                    break  # —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî –≤—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞

        except Exception as e:
            if attempt == max_retries - 1:
                await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            else:
                await asyncio.sleep(2)
